import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;

/**Keeps track of data associated with tiles.
 * 
 * @author Marvin Li and James Bai
 * @version January 4th, 2015
 */
public class Tile
{
	final static int TILE_WIDTH = 80; // Subjected to
	final static int TILE_HEIGHT = 80; // change~
	private Image image;
	Point position;
	ArrayList<Card>piece=new ArrayList<Card>(1);
	
	/**Creates a tile at the designated x and y.
	 * 
	 * @param x the x coordinate of the top left corner of the tile
	 * @param y the y coordinate of the top left corner of the tile
	 */
	// Need to implement image
	public Tile(int x, int y)
	{
		position =new Point(x,y);
	}
	
	/**Adds a piece to the tile.
	 * 
	 * @param newCard the card that will be added.
	 */
	public void addPiece(Card newCard)
	{
		piece.add(newCard);
	}
	
	/**Removes a piece from the tile.
	 * 
	 * @return the card that is removed.
	 */
	public Card removePiece()
	{
		// perhaps can be merged with the 'captured' method.
		return(piece.remove(0));
	}
	
	/**Determines if the selected point is within the tile.
	 * 
	 * @param selectedPoint the selected point
	 * @return true if the selected point is within the tile.
	 * 		   false otherwise.
	 */
	public boolean contains(Point selectedPoint)
	{
		return (new Rectangle(position.x, position.y, TILE_WIDTH, TILE_HEIGHT))
				.contains(selectedPoint);
	}
	
	/**Draws the card.
	 * 
	 * @param g
	 */
	public void draw(Graphics g)
	{
		// An image would be greatly appreciated.
		g.setColor(Color.BLUE);
		g.drawRect(position.x, position.y,TILE_WIDTH, TILE_HEIGHT);
		
		for(Card next:piece)
            next.draw(g);;
	}

	/**Returns whether or not is there a piece on the tile.
	 * 
	 * @return true if there is a piece on the tile.
	 * 		   false otherwise.
	 */
	public boolean hasPiece()
	{
		return (!piece.isEmpty());
	}

	// No need to get position, just use the variable.
	
	// No need to set the position of the tile either as tiles dont move.
}

